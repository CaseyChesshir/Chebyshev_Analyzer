# This file was *autogenerated* from the file /Users/caseychesshir/Dropbox/MATH/MATH351/project/Chebyshev_Analyzer.sage
from sage.all_cmdline import *   # import sage library
_sage_const_13 = Integer(13); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_25 = Integer(25)
"""
==========================
|Chebyshev Analyzer.sagews|
|Author: Casey Chesshir   |
==========================

This worksheet 
"""

from sage.symbolic.integration.integral import definite_integral

def getNodes(a,b,n):
	'''
	args: a - left	endpoint of xpoints
		  b - right endpoint of xpoints 
		  n - size of xpoints
	returns: list containing equally 
			 spaced nodes between a and b
	'''
	h = (b-a)/n
	Nodes = [a.n() + i*h.n() for i in range(n+_sage_const_1 )]
	return Nodes

def getChebyshevNodes(a,b,n):
	'''
	args: a - left	endpoint of xpoints
		  b - right endpoint of xpoints 
		  n - size of xpoints
	returns: list containing non-equally 
			 spaced nodes between a and b
	'''
	theta = pi/n
	midpoint = b - (b-a)/_sage_const_2 
	radius = b - midpoint
	#Cheb = [midpoint + radius * cos(theta*i).n() for i in range(n+1)]
	Cheb = [ (_sage_const_1 /_sage_const_2 )*(a + b) + (_sage_const_1 /_sage_const_2 )*(b-a)*cos((_sage_const_2 *i+_sage_const_1 )/(_sage_const_2 *n+_sage_const_2 )*pi).n() for i in range(n+_sage_const_1 )]
	Cheb[n] = a
	Cheb = Cheb[::-_sage_const_1 ]
	Cheb[n] = b
	return Cheb

def getPolynomial(xypoints):
	'''
	args: xypoints - n pairs of xy values, 
					 {(x0,y0),(x1,y1),...,(xn,yn)}
	returns: polynomial such that:
			 f(x0) = y0, f(x1) = y1, ... , f(xn) = yn
	'''
	R = PolynomialRing(RR,"x")
	#%var x
	x = var('x')
	xpoints = [pair[_sage_const_0 ] for pair in xypoints]
	ypoints = [pair[_sage_const_1 ] for pair in xypoints]
	divdiff = R.divided_difference(xypoints)
	polynomial = divdiff[_sage_const_0 ]
	for i in range(_sage_const_1 ,len(xpoints)):
		product = divdiff[i]
		for j in range(i):
			product *= (x - xpoints[j])
		polynomial+= product
	return polynomial

def evaluateTotalError(f,g,h,a,b,n):
	'''
	args: f - function being interpolated
	      g - equally spaced polynomial 
		  h - Chebyshev polynomial 
		  a - left endpoint of integral
		  b - right endpoint of integral
		  n - number of 

	returns: total error 
	
			 Numerically integrates |f(x)-g(x)|
			 from a to b

			 This is exactly the "difference" 
			 between the original function and 
			 the interpolation polynomial that
			 is currently being analyzed. 

	'''

	g_error = definite_integral(f-g,x,a,b)
	h_error = definite_integral(f-h,x,a,b)		

	print("|f(x)-g(x)| from " + a + " to " + b + ": " + g_error)
	print("|f(x)-h(x)| from " + a + " to " + b + ": " + h_error)

	return total_error

R = PolynomialRing(RR, "x") # {x | x in Reals}

def analyze(a,b,n,f):
	'''
	args: a - left endpoint of interval 
		  b - right endpoints of interval
		  n - number of points to analyze
		  f - function on which to analyze the n points 
	
	returns: tuple (p,cp)

			 p is a polynomial created using 
			 equally spaced nodes within [a,b]

			 cp is a polynomial created using 
			 Chebyshev nodes within [a,b] 


	'''
	pts = getNodes(a,b,n)
	cpts = getChebyshevNodes(a,b,n)
	ypts = [f(i) for i in pts]
	cypts = [f(i) for i in cpts]
	pairs = zip(pts,ypts)
	cpairs = zip(cpts,cypts)

	p = getPolynomial(pairs)
	cp = getPolynomial(cpairs)

	plot(p,(x,-_sage_const_1 ,_sage_const_1 )) + plot(cp,(x,-_sage_const_1 ,_sage_const_1 ))
	return p,cp

def Runge(x):
	return _sage_const_1 /(_sage_const_1 +_sage_const_25 *x**_sage_const_2 ) # famously bad function for polynomial interpolation 


# here is the data for the "nice example"
# You can change f(x) to any continous function you want to do this to.
# a and b are the endpoints of the domain you would like to analyze. 
# n is the number of nodes to interpolate and order of the polynomials. 
# Leave g and h as they are. 
__tmp__=var("x"); f = symbolic_expression(Runge(x)).function(x)
a = -_sage_const_1 
b = _sage_const_1 
n = _sage_const_13 
g,h = analyze(a,b,n,f) #g(x) is the equally spaced polynomial, h(x) is the Chebyshev polynomial 

plot(f,(x,a,b),color='blue')+plot(g,(x,-_sage_const_1 ,_sage_const_1 ),color='green')+plot(h,(x,-_sage_const_1 ,_sage_const_1 ),color='red')
# the above line won't run when loaded as a script in the interactive shell
# copy and paste it to see the visual when running in the notebook

# The blue graph is the original Runge function.
# The green graph is its equally spaced polynomial interpolation function.
# The red graph is the Chebyshev polynomial interpolation function.










